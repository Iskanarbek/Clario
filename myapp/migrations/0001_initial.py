# Generated by Django 5.2.6 on 2025-09-14 16:13

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DifficultyLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(unique=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('name', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('option_a', models.CharField(max_length=200)),
                ('option_b', models.CharField(max_length=200)),
                ('option_c', models.CharField(max_length=200)),
                ('option_d', models.CharField(max_length=200)),
                ('correct_answer', models.CharField(choices=[('A', 'Option A'), ('B', 'Option B'), ('C', 'Option C'), ('D', 'Option D')], max_length=1)),
                ('explanation', models.TextField()),
                ('difficulty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.difficultylevel')),
            ],
        ),
        migrations.CreateModel(
            name='RuleTheory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('explanation', models.TextField()),
                ('difficulty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.difficultylevel')),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('explanation', models.TextField()),
                ('difficulty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.difficultylevel')),
            ],
        ),
        migrations.CreateModel(
            name='TestQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('option_a', models.CharField(max_length=200)),
                ('option_b', models.CharField(max_length=200)),
                ('option_c', models.CharField(max_length=200)),
                ('option_d', models.CharField(max_length=200)),
                ('correct_answer', models.CharField(choices=[('A', 'Option A'), ('B', 'Option B'), ('C', 'Option C'), ('D', 'Option D')], max_length=1)),
                ('explanation', models.TextField()),
                ('difficulty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.difficultylevel')),
            ],
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('placement_test_taken', models.BooleanField(default=False)),
                ('placement_test_score', models.FloatField(default=0)),
                ('current_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.difficultylevel')),
                ('problems_solved', models.ManyToManyField(blank=True, to='myapp.problem')),
                ('rules_studied', models.ManyToManyField(blank=True, to='myapp.ruletheory')),
                ('terms_studied', models.ManyToManyField(blank=True, to='myapp.term')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
